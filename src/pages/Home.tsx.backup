import { useEffect, useState, useMemo } from 'react'
import { ProductCard } from '../components/ProductCard'
import { Header } from '../components/Header'
import { ShoppingCart } from '../components/ShoppingCart'
import { useCartStore } from '../store/cart'
import { type Product } from '../lib/supabase'
import { searchProducts, getFilterOptions, getFeaturedProducts, type SearchOptions, type SearchFilters } from '../lib/search'
import { Search, Filter, Palette, X, ChevronDown } from 'lucide-react'
import { Button } from '../components/ui/button'
import { Input } from '../components/ui/input'

interface FilterOptions {
  categories: string[]
  subcategories: string[]
  artForms: string[]
  states: string[]
}

export function Home() {
  const [products, setProducts] = useState<Product[]>([])
  const [featuredProducts, setFeaturedProducts] = useState<Product[]>([])
  const [loading, setLoading] = useState(true)
  const [searchQuery, setSearchQuery] = useState('')
  const [filters, setFilters] = useState<SearchFilters>({})
  const [sortBy, setSortBy] = useState<SearchOptions['sortBy']>('featured')
  const [showFilters, setShowFilters] = useState(false)
  const [filterOptions, setFilterOptions] = useState<FilterOptions>({
    categories: [],
    subcategories: [],
    artForms: [],
    states: []
  })
  const [total, setTotal] = useState(0)
  const [error, setError] = useState<string | null>(null)
  
  const { isOpen, toggleCart } = useCartStore()

  useEffect(() => {
    loadInitialData()
  }, [])

  useEffect(() => {
    performSearch()
  }, [searchQuery, filters, sortBy])

  const loadInitialData = async () => {
    setLoading(true)
    setError(null)
    
    try {
      // Load filter options and featured products
      const [filterOptionsResult, featuredResult] = await Promise.all([
        getFilterOptions(),
        getFeaturedProducts(6)
      ])

      setFilterOptions(filterOptionsResult)
      setFeaturedProducts(featuredResult)
      
      // Perform initial search
      await performSearch()
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load data')
    } finally {
      setLoading(false)
    }
  }

  const performSearch = async () => {
    try {
      const searchOptions: SearchOptions = {
        query: searchQuery || undefined,
        filters: Object.keys(filters).length > 0 ? filters : undefined,
        sortBy,
        limit: 20,
        offset: 0
      }

      const result = await searchProducts(searchOptions)
      setProducts(result.products)
      setTotal(result.total)
      
      if (result.error) {
        setError(result.error)
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Search failed')
    }
  }

  const handleSearch = (query: string) => {
    setSearchQuery(query)
  }

  const handleCategoryFilter = (category: string) => {
    if (category === 'All') {
      setFilters(prev => ({ ...prev, category: undefined }))
    } else {
      setFilters(prev => ({ ...prev, category }))
    }
  }

  const handleFilterChange = (filterType: keyof SearchFilters, value: any) => {
    setFilters(prev => ({
      ...prev,
      [filterType]: value || undefined
    }))
  }

  const clearFilters = () => {
    setFilters({})
    setSearchQuery('')
  }

  const handleProductClick = (product: Product) => {
    window.location.href = `/product/${product.id}`
  }

  const handleCheckout = () => {
    window.location.href = '/checkout'
  }

  const priceRanges = [
    { label: 'Under ₹2,000', min: 0, max: 2000 },
    { label: '₹2,000 - ₹5,000', min: 2000, max: 5000 },
    { label: '₹5,000 - ₹10,000', min: 5000, max: 10000 },
    { label: '₹10,000 - ₹25,000', min: 10000, max: 25000 },
    { label: 'Above ₹25,000', min: 25000, max: 100000 }
  ]

  const activeFiltersCount = useMemo(() => {
    return Object.values(filters).filter(value => 
      value !== undefined && value !== '' && value !== null
    ).length + (searchQuery ? 1 : 0)
  }, [filters, searchQuery])

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="container mx-auto px-4 py-6">
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {Array.from({ length: 8 }).map((_, i) => (
              <div key={i} className="animate-pulse bg-white rounded-lg shadow-sm p-4">
                <div className="bg-muted aspect-square rounded-lg mb-4"></div>
                <div className="space-y-2">
                  <div className="bg-muted h-4 rounded"></div>
                  <div className="bg-muted h-4 rounded w-3/4"></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="container mx-auto px-4 py-6">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-destructive mb-4">Error</h2>
            <p className="text-muted-foreground mb-4">{error}</p>
            <Button 
              onClick={() => loadInitialData()}
              className="bg-gray-800 hover:bg-gray-900 text-white"
            >
              Try Again
            </Button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header onSearch={handleSearch} onCategorySelect={handleCategoryFilter} />
      
      <main className="container mx-auto px-4 py-6">

        {/* Featured Products */}
        {featuredProducts.length > 0 && (
          <div className="mb-8">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-semibold text-gray-800">Featured Products</h3>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {featuredProducts.map((product: Product) => (
                <div key={product.id} className="relative">
                  <ProductCard
                    product={product}
                    onClick={() => handleProductClick(product)}
                  />
                  <div className="absolute top-2 left-2">
                    <span className="bg-gray-900 text-white text-xs px-2 py-1 rounded font-medium">
                      Featured
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Search and Filter Bar */}
        <div className="mb-8 bg-white rounded-lg shadow-sm border p-6">
          <div className="flex flex-col md:flex-row gap-4 items-center justify-between">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-3 w-4 h-4 text-gray-400" />
              <Input
                type="text"
                placeholder="Search for art forms, artists, or regions..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 pr-4 py-2 w-full border-gray-200 focus:border-gray-400"
              />
            </div>
            <div className="flex gap-3">
              <Button
                variant="outline"
                onClick={() => setShowFilters(!showFilters)}
                className="flex items-center gap-2 border-gray-200 hover:bg-gray-50"
              >
                <Filter className="w-4 h-4" />
                Filters
                {activeFiltersCount > 0 && (
                  <span className="bg-gray-900 text-white text-xs px-2 py-1 rounded-full ml-1">
                    {activeFiltersCount}
                  </span>
                )}
                <ChevronDown className="w-4 h-4" />
              </Button>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value as SearchOptions['sortBy'])}
                className="px-3 py-2 border border-gray-200 rounded-md focus:border-orange-500 focus:outline-none"
              >
                <option value="featured">Featured First</option>
                <option value="rating">Highest Rated</option>
                <option value="price_low">Price: Low to High</option>
                <option value="price_high">Price: High to Low</option>
                <option value="newest">Newest First</option>
              </select>
            </div>
          </div>

          {/* Active Filters */}
          {(activeFiltersCount > 0) && (
            <div className="mt-4 flex flex-wrap gap-2">
              {searchQuery && (
                <span className="inline-flex items-center gap-1 bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm">
                  Search: "{searchQuery}"
                  <button onClick={() => setSearchQuery('')}>
                    <X className="w-3 h-3" />
                  </button>
                </span>
              )}
              {Object.entries(filters).map(([key, value]) => 
                value && (
                  <span key={key} className="inline-flex items-center gap-1 bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm">
                    {key}: {typeof value === 'object' ? `₹${value.min}-₹${value.max}` : value}
                    <button onClick={() => handleFilterChange(key as keyof SearchFilters, undefined)}>
                      <X className="w-3 h-3" />
                    </button>
                  </span>
                )
              )}
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={clearFilters}
                className="text-gray-600 hover:text-gray-800"
              >
                Clear all
              </Button>
            </div>
          )}
        </div>

        {/* Results Summary */}
        <div className="mb-6 text-center">
          <p className="text-gray-600">
            Found <span className="font-semibold text-gray-900">{total}</span> authentic Indian artworks
          </p>
        </div>

        {/* Products Grid */}
        {products.length === 0 ? (
          <div className="text-center py-12">
            <Palette className="w-16 h-16 text-gray-300 mx-auto mb-4" />
            <h3 className="text-2xl font-semibold mb-4">No artworks found</h3>
            <p className="text-muted-foreground mb-4">
              Try adjusting your search or filter criteria to discover more pieces
            </p>
            <Button 
              onClick={clearFilters}
              className="bg-gray-900 hover:bg-gray-800 text-white"
            >
              Clear Filters & Browse All
            </Button>
          </div>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {products.map((product: Product) => (
              <ProductCard
                key={product.id}
                product={product}
                onClick={() => handleProductClick(product)}
              />
            ))}
          </div>
        )}

        {/* Load More */}
        {products.length > 0 && products.length < total && (
          <div className="text-center mt-12">
            <Button 
              onClick={() => {/* Implement load more */}}
              variant="outline"
              className="border-gray-200 hover:bg-gray-50 text-gray-700"
            >
              Load More Artworks ({total - products.length} more)
            </Button>
          </div>
        )}
      </main>

      <ShoppingCart
        isOpen={isOpen}
        onClose={toggleCart}
        onCheckout={handleCheckout}
      />
    </div>
  )
}